Na era moderna, software é comumente entregue como um serviço: denominados web apps, ou software-como-serviço.
The Twelve-Factor App é uma metodologia para construir softwares-como-serviço que:

- Usam formatos declarativos para automatizar a configuração inicial, minimizar tempo e custo 
para novos desenvolvedores participarem do projeto;
- Tem um contrato claro com o sistema operacional que o suporta, oferecendo portabilidade máxima 
entre ambientes que o executem;
- São adequados para implantação em modernas plataformas em nuvem, evitando a necessidade por 
servidores e administração do sistema;
- Minimizam a divergência entre desenvolvimento e produção, permitindo a implantação contínua 
para máxima agilidade;
- E podem escalar sem significativas mudanças em ferramentas, arquiteturas, ou práticas de desenvolvimento.

The Twelve-Factor App pode ser aplicada a aplicações escritas em qualquer linguagem de programação,
e que utilizem qualquer combinação de serviços de suportes (banco de dados, filas, cache de memória, etc).

Documentação oficial
https://12factor.net/pt_br/

#################################################################################

Dependências
Declare e isole explicitamente as dependências!
A maioria das linguagens de programação oferecem um sistema de pacotes para a distribuição de
bibliotecas de apoio. Bibliotecas instaladas por meio de um sistema de pacotes podem ser 
instaladas em todo o sistema (conhecidas como “site
packages”) ou com escopo dentro do diretório contendo a aplicação (conhecidas como “vendoring” 
ou “building”).

Uma aplicação Twelve Factor nunca confia na existência implícita de pacotes em todo o sistema.
Ela declara todas as dependências, completa e exatamente, por meio de um manifesto de declaração
de dependência. Além disso, ela usa uma ferramenta de isolamento de dependência durante a execução
para garantir que não há dependências implícitas “vazamento” a partir do sistema circundante. A completa
e explícita especificação de dependências é aplicada de maneira uniforme tanto para produção quanto para desenvolvimento.

Por exemplo, em Python existem duas ferramentas separadas para estas etapas –
Pip é utilizado para declaração e Virtualenv para isolamento. Mesmo C tem Autoconf para declaração de dependência,
e vinculação estática pode fornecer o isolamento. Não importa qual o conjunto de ferramentas, declaração de dependência 
e isolamento devem ser sempre usados juntos – apenas um ou o outro não é suficiente para satisfazer doze-fatores.

Um dos beneficios da declaração de dependência explícita é que simplifica a configuração da aplicação para novos desenvolvedores.
O novo desenvolvedor pode verificar a base de código do aplicativo em sua máquina de desenvolvimento, exigindo apenas runtime da
linguagem e gerenciador de dependência instalado como pré-requisitos. Eles serão capazes de configurar tudo o que é necessário
para rodar o código da aplicação com um determinístico comando de build. Por exemplo, o comando de build para Ruby/Bundler é 
bundle install, enquanto que para Clojure/Leiningen é lein deps.

Aplicações doze-fatores também não contam com a existência implícita de todas as ferramentas do sistema. 
Exemplos incluem executar algum comando externo como do ImageMagick ou curl. Embora possam existir essas ferramentas 
em muitos ou mesmo na maioria dos sistemas, não há garantia de que eles vão existir em todos os sistemas em que a aplicação 
pode rodar no futuro, ou se a versão encontrada em um futuro sistema será compatível com a aplicação. Se a aplicação precisa
executar alguma ferramenta do sistema, essa ferramenta deve ser vendorizada na aplicação.

#############################################################################################

Processos

VI. Processos
Execute a aplicação como um ou mais processos que não armazenam estado
A aplicação é executada em um ambiente de execução como um ou mais processos.

No caso mais simples, o código é um script autônomo, o ambiente de execução é o laptop local de 
um desenvolvedor com o runtime da linguagem instalado, e o processo é iniciado pela linha de comando 
(por exemplo, python my_script). Na outra extremidade do espectro, o deploy em produção de uma aplicação
sofisticada pode utilizar vários tipos de processos, instanciado em zero ou mais processos em andamento.

Processos Twelve Factor são stateless(não armazenam estado) e share-nothing. Quaisquer dados que precise persistir deve ser 
armazenado em um serviço de apoio stateful(que armazena o seu estado), tipicamente uma base de dados.

O espaço de memória ou sistema de arquivos do processo pode ser usado como um breve, cache de transação única. 
Por exemplo, o download de um arquivo grande, operando sobre ele, e armazenando os resultados da operação no banco de dados.
A aplicação doze-fatores nunca assume que qualquer coisa cacheada na memória ou no disco estará disponível em uma futura
solicitação ou job – com muitos processos de cada tipo rodando, as chances são altas de que uma futura solicitação será
servida por um processo diferente. Mesmo quando rodando em apenas um processo, um restart (desencadeado pelo deploy de um código,
mudança de configuração, ou o ambiente de execução realocando o processo para uma localização física diferente) geralmente
vai acabar com todo o estado local (por exemplo, memória e sistema de arquivos).

Empacotadores de assets (como Jammit ou django-compressor) usa o sistema de arquivos como um cache para assets compilados.
Uma aplicação doze-fatores prefere fazer isto compilando durante a fase de build, tal como o Rails asset pipeline,
do que em tempo de execução.

Alguns sistemas web dependem de “sessões persistentes” – ou seja, fazem cache dos dados da sessão do usuário na memória
do processo da aplicação, esperando futuras requisições do mesmo visitante para serem encaminhadas para o mesmo processo.
Sessões persistentes são uma violação do doze-fatores e nunca devem ser utilizadas ou invocadas. Dados do estado da sessão 
são bons candidatos para um datastore que oferece tempo de expiração, tal como Memcached ou Redis.




