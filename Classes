- MethodArgumentNotValidException - Exceção a ser lançada quando a validação de um 
argumento anotado com @Valid, falha. 

##########################################################################

- ResponseEntity ´É uma classe que é uma abstração completa para o Response. 
Nela é possível definir os Headers, Body e Status Code de uma resposta HTTP.
Tipos de Status Code:
- 200 - ResponseEntity.ok()
- 202 - ResponseEntity.accepted()
- 204 - ResponseEntity.noContent()
- 400 - ResponseEntity.badRequest()
- 404 - ResponseEntity.notFound()
- 409 - ResponseEntity.status(HttpStatus.CONFLICT).body("Já criado");

Manipulando o Body da Requisição
ResponseEntity.ok().body("Body") 

Customizando Status Code
ResponseEntity.status(HttpStatus.CONFLICT).body("Elemento ja criado");

Configurando Headers
ResponseEntity.ok().header("x-custom-data", "custom").body("body");
Header recebe dois parâmetros. O primeiro é header, o segundo o valor da 
entrada do header. 
ResponseEntity neste caso provê uma abstração bastante fluída para manipularmos o Response.

############################################################################

UriComponentsBuilder - É uma classe utilitária do Spring que nos ajuda a criar URL's.
Essa classe nos ajuda a lidar com problemas comuns de encondings presentes nas URIs (identificador
uniforme de recurso).
O UriComponetesBuilder é injetado automaticamente nos métodos de um Controller e consegue 
gerenciar o endereço do servidor baseado nas próprias configuraçoes internas da aplicação.

@PostMapping
public ResponseEntity<PropostaCriada> novaProposta(@RequestBody @Valid NovaProposta novaProposta, UriComponentsBuilder uriComponentsBuilder) {
  // Código omitido
  return ResponseEntity.created(uriComponentsBuilder.path("/propostas/{id}").buildAndExpand(nova.getId()).toUri()).body(nova);
}

###########################################################################

IncorrectResultSizeDataAccessException

Exceção de acesso a dados lançada quando um resultado não era do tamanho esperado, 
por exemplo, ao esperar uma única linha, mas obtendo 0 ou mais de 1 linha.

#########################################################################

Base 64

Esta classe consiste exclusivamente em métodos estáticos para obter codificadores e
decodificadores para o esquema de codificação Base64. 
A implementação dessa classe oferece suporte aos seguintes tipos de Base64, conforme 
especificado no RFC 4648 e no RFC 2045 .
Básico
Usa "The Base64 Alphabet" conforme especificado na Tabela 1 do RFC 4648 e do 
RFC 2045 para a operação de codificação e decodificação. O codificador não adiciona
nenhum caractere de avanço de linha (separador de linha). O decodificador rejeita
dados que contenham caracteres fora do alfabeto base64.

URL e nome de arquivo seguros
Usa o "Alfabeto Base64 seguro para URL e nome de arquivo" conforme especificado na 
Tabela 2 de RFC 4648 para codificação e decodificação. O codificador não adiciona 
nenhum caractere de avanço de linha (separador de linha). O decodificador rejeita 
dados que contenham caracteres fora do alfabeto base64.

MIME
Usa o "Alfabeto Base64" conforme especificado na Tabela 1 do RFC 2045 para operação
de codificação e decodificação. A saída codificada deve ser representada em linhas 
de no máximo 76 caracteres cada e usa um retorno de carro '\r'seguido imediatamente 
por um avanço de linha '\n'como separador de linha. Nenhum separador de linha é 
adicionado ao final da saída codificada. Todos os separadores de linha ou outros
caracteres não encontrados na tabela do alfabeto base64 são ignorados na operação 
de decodificação.





