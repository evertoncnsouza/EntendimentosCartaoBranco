As aplicações devem implementar Health Check.
Health Check é uma análise do ambiente que visa apontas falhas e pontos de 
melhorias.

Por que Health Check?
Nossas aplicações normalmente rodam em um ambiente gerenciado, ou seja, uma
plataforma que é capaz de detectar se alguma coisa não está funcionando conforme o
esperado, um crash de aplicação ou carga demasiada.

Depois de notar essas falhas essas plataformas são capazes de tomar algumas ações 
para tentar remediar a aplicação, reiniciar ou mesmo desligar a aplicação e lançá-la
novamente em outro servidor.

Para que isso funcione precisamos expor alguma operação em nossa aplicação para que
a plataforma possa chamar e verificar se tudo está funcionando perfeitamente.

Temos algumas alternativas, quando nossa aplicação expõe uma API REST podemos usar
um endpoint HTTP GET para esse fim, esse endpoint deve verificar se o que a aplicação
precisa para funcionar está 100% operacional. Isso pode incluir banco de dados e 
serviços de mensageria por exemplo.

Entretanto, se nossa aplicação é uma aplicação de processamento em lote ou batch, 
podemos expor uma funcionalidade via linha de comando, seguindo os mesmo princípios,
ou seja, validando conexões externas da nossas aplicações.
######################################################################

Readiness Check ou Liveness Check
Nossas aplicações normalmente rodam em um ambiente gerenciado, ou seja uma plataforma 
que é capaz de detectar se alguma coisa não está funcionando conforme o esperado, 
um crash de aplicação ou carga demasiada.

Nossas aplicações consomem um determinado tempo para estarem aptas a receber fluxo de trabalho,
durante esse intervalo de tempo é recomendado que nenhuma requisição seja redirecionada para
a nossa aplicação em processo de preparação.

Esse processo de preparação pode compreender a configuração de uma fila, conexão com um banco 
de dados ou um determinado pré-processamento.

Temos algumas alternativas para realizar esta tarefa, quando nossa aplicação expõe uma API REST
podemos usar um endpoint HTTP GET para esse fim, esse endpoint deve verificar se a aplicação está 
preparada para começar a receber fluxo de trabalho, ou requisições. Uma vez que a plataforma nota
que esse endpoint retorna uma status de sucesso as requisições começam à ser redirecionadas para 
esta nova instância de serviço.

Processamentos em lote também podem implementar este conceito expondo operações de linha de comando,
dessa forma a plataforma, cujo serviço está instalado é capaz de identificar se realmente o serviço 
está apto a começar o trabalho.

Dicas de Claudio Eduardo Oliveira
Tente minimizar o tempo de preparação da sua aplicação sempre que possível, esse tempo pode impactar
sua regra de auto-scaling e alta-disponibilidade da sua aplicação, pois durante essa fase sua aplicação
não pode receber fluxo de trabalho.

É importante termos um trabalho de ajuste fino nessas configurações, pois elas impactam diretamente
suas regras de alta-disponibilidade e auto-scaling


#######################################################################

Health Checks no Spring
https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html

#######################################################################

Heath Check Kubernets

Configure as sondas de vivacidade, prontidão e inicialização
Esta página mostra como configurar probes de ativação, prontidão e inicialização para contêineres.

O kubelet usa sondagens de atividade para saber quando reiniciar um contêiner. Por exemplo, 
as análises de atividade podem detectar um conflito, em que um aplicativo está em execução, 
mas não consegue fazer progresso. Reiniciar um contêiner em tal estado pode ajudar a tornar 
o aplicativo mais disponível, apesar dos bugs.

O kubelet usa sondagens de prontidão para saber quando um contêiner está pronto para começar
a aceitar tráfego. Um pod é considerado pronto quando todos os seus contêineres estão prontos. 
Um uso desse sinal é controlar quais pods são usados como back-ends para serviços.
Quando um pod não está pronto, ele é removido dos balanceadores de carga do serviço.

O kubelet usa testes de inicialização para saber quando um aplicativo de contêiner foi iniciado.
Se tal teste for configurado, ele desativa as verificações de atividade e prontidão até que tenha sucesso, 
garantindo que esses testes não interfiram na inicialização do aplicativo. Isso pode ser usado para adotar
verificações de atividade em contêineres de inicialização lenta, evitando que sejam eliminados pelo kubelet
antes de começarem a funcionar.

############################################################################################

Health Check na arquitetura de microsserviçoes

https://microservices.io/patterns/observability/health-check-api.html







