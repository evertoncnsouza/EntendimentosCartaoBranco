Após ter um Realm no keycloak, o primeiro passo é adicionar as dependências

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
</dependency>
- Ajuda a configurar a aplicação como Resource Server. 

<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-oauth2-jose</artifactId>
</dependency>

- Configura o Spring Framework com Tokens JWT. Essa lib, ajuda abrir o token
e manipulá-lo com classes java.
Jose = Javascript Object Signing and Encryption

Agora em Application.Properties, indique o emissor de token 

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

- A primeira configuração informa onde o Spring Security pode encontrar o authorization
server.

A segunda configuração, indica onde o Spring Security poderá encontrar as chaves para conseguir
validar a assinatura do token. 

Com esses passos, a aplicação já é um Resource Server. 

Agora, é necessário fazer com que o Spring autorize as requisições de acordo com o token
recebido, e com base em seus dados permitir o processamento da requisição ou bloquear
a mesma.

- Bloqueando as requisições com base em Tokens
É preciso indicar para o Spring Security, o que deve ser avaliado para permitir ou não
o processamento da requisição, de acordo com o token passado no sistema.
Isto se chama Autorização, onde com as credenciais em mãos(Autenticação/tokens), 
vamos aplicar regras para decidir negar ou permitir a requisição.

@Configuration
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests(authorizeRequests ->
                        authorizeRequests
                                .antMatchers(HttpMethod.GET, "/api/propostas/**").hasAuthority("SCOPE_propostas:read")
                                .antMatchers(HttpMethod.GET, "/api/cartoes/**").hasAuthority("SCOPE_cartoes:read")
                                .antMatchers(HttpMethod.POST, "/api/cartoes/**").hasAuthority("SCOPE_cartoes:write")
                                .antMatchers(HttpMethod.POST, "/api/propostas/**").hasAuthority("SCOPE_propostas:write")
                                .anyRequest().authenticated()
                )
                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);
    }

}

 - Este método permite que façamos algumas configurações relacionadas a segurança no framework,
 onde declaramos uma série de configurações relacionadas a paths das nossas APIs e suas
 credenciais necessárias para acessá-las. 
 
 
 Ex: 
 .antMatchers(HttpMethod.GEt, "/api/propostas/**).hasAuthority("SCOPE_propostas:read")
 
 Neste caso /api/propostas/** , aqui podemos usar wildcards, devem ser protegidas
 por uma regra, o token repassado deve conter a claim SCOPE_propostas:read, caso 
 contrário a requisição será negada.
 
 Aqui as claims do token JWT se tornam Roles no Spring Security.
 
 Não é necessário usar os scopes do JWT, podemos utilizar uma custom claim para validá-lo,
 não há nenhuma restrição em usar uma claim especifica, neste caso, utilizamos scope, 
 podemos usar outras, de acordo com a necessidade.
 
 
 
 




