Jaeger é um software open source para rastreamento de transações entre serviços distribuídos. 
Ele é usado para monitorar e solucionar problemas em ambientes de microsserviços complexos.

<dependencies>
	<dependency>
      <groupId>io.opentracing.contrib</groupId>
      <artifactId>opentracing-spring-jaeger-web-starter</artifactId>
      <version>3.1.2</version>
    </dependency>
    
    <dependency>
      <groupId>io.opentracing.contrib</groupId>
      <artifactId>opentracing-spring-cloud-starter</artifactId>
      <version>0.5.6</version>
    </dependency>
</dependencies>

- Configure o Application.properties

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

- Assim está tudo configurado, o Spring agora utiliza as configurações automáticas para 
vários módulos, como por ex:

Spring Web (RestControllers, RestTemplates, WebAsyncTask, WebClient, WebFlux)
@Async, @Scheduled, Executors
WebSocket STOMP
Feign, HystrixFeign
Hystrix
JMS
JDBC
Kafka
Mongo
Zuul
Reactor
RxJava
Redis
Standard logging - logs are added to active span
Spring Messaging - trace messages being sent through Messaging Channels
RabbitMQ

Cada um desses módulos tem uma configuração automática.

ex:
@Configuration
@AutoConfigureAfter({TracerRegisterAutoConfiguration.class, org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration.class})
@ConditionalOnBean(RedisConnectionFactory.class)
@ConditionalOnProperty(name = "opentracing.spring.cloud.redis.enabled", havingValue = "true", matchIfMissing = true)
@EnableConfigurationProperties(RedisTracingProperties.class)
public class RedisAutoConfiguration {

  @Bean
  public RedisAspect openTracingRedisAspect(Tracer tracer, RedisTracingProperties properties) {
    return new RedisAspect(tracer, properties);
  }

}

Neste código, se você tiver um objeto 

RedisConnectionFactory ele irá injetar no contexto de injeção de dependência do Spring o
RedisAspect que irá executar antes e após a cada operação dessa tecnologia, adicionando as
informações necessárias da mesma no span do OpenTracing!

Agora podemos olhar o mesmo comportamento no código do Feign, que é uma biblioteca muito
famosa para realização de integrações com outros serviços, principalmente via HTTP.

@Configuration
@ConditionalOnClass(Client.class)
@ConditionalOnBean(Tracer.class)
@AutoConfigureAfter(TracerAutoConfiguration.class)
@AutoConfigureBefore(name = "org.springframework.cloud.openfeign.FeignAutoConfiguration")
@ConditionalOnProperty(name = "opentracing.spring.cloud.feign.enabled", havingValue = "true", matchIfMissing = true)
public class FeignTracingAutoConfiguration {
   ...

  @Bean
  public TracingAspect tracingAspect() {
    return new TracingAspect();
  }
}

Neste caso, utilizamos a annotation ConditionalOnProperty para verificação
se a implementaçãoi da open tracing está habilitada para o Feign. 
Caso não exista nenhuma configuração explícita, o trace é habilitado por
default por conta do argumento matchIfMissing = true presente na annotation.

O sentimento de "mágica" do Spring se deve a condição, se existe ou não uma determinada classe,
pacote, etc. Por este motivo em sua grande maioria basta adicionar uma dependência no pom.xml que
a "mágica" acontece! Na verdade alguma classe contida na dependência, habilita certas configurações,
funcionalidades, comportamentos, etc.

Para testar, verificamos se o Jaeger foi iniciado, conforme esta no docker-compose.
Abra o endereço: endereço http://localhost:16686/search

Após iniciar a aplicação e fazer algumas operações, no caso criar uma proposta, você terá
o nome do serviço no jaeger. Selecionando o nome do serviço e criando em Find Traces,
irão listar os traces do lado direito.

###################################################################################
Jaeger - Tags

Em OpenTracing existe o conceito de Span, que é um período que representa uma operação, 
como por exemplo, uma requisição HTTP, na qual contém metadados extremamente importantes,
como a tag, que tem como objetivo carregar informações importantes do Span, como por exemplo:

component
http.method
http.status_code
http.url
Essas informações são importantes para o troubleshooting de problemas e graças ao Spring 
elas são reportadas automaticamente!

Caso deseje reportar uma tag específica, como por exemplo, email do usuário,
precisaremos instrumentar no código!

O Spring provê uma classe denominada Tracer na qual você consegue fazer operações relacionadas ao OpenTracing!

1º Precisamos injetar o objeto Tracer, conforme código abaixo:

public class PropostaController {

  private final Tracer tracer;

  public PropostaController(Tracer tracer) {
    this.tracer = tracer;
  }

}
2º Agora que temos o objeto, precisamos pegar o span ativo, conforme código abaixo:

Span activeSpan = tracer.activeSpan();
3º Precisamos definir a tag desejada, para isso o objetivo Span tem o método setTag, conforme código abaixo:

activeSpan.setTag("user.email", "everton@gmail.com.br");

*Atenção aos pacotes

Após fazer algumas operações, já dá para testar, basta procurar o user.email.
Assim podemos melhorar nosso processo de troubleshooting, como por exemplo,
filtra todas as operações que o everton@gmail.com fez

Dica: Use com parcimônia as tags, pois é um código de infraestrutura(trace) em
conjunto com o código de negócio, portanto tente segmentar.

#################################################################################

Jaeger - Baggage Item
Tem como objetivo carregar e propagar informações importantes do Span e dos próximos Spans.
Caso deseje retornar um baggage item específico, como por exemplo email do usuário, é necessário
instrumentar no código.

É necessario injetar o Tracer no código

public class PropostaController {

  private final Tracer tracer;

  public PropostaController(Tracer tracer) {
    this.tracer = tracer;
  }

}

Com o objeto, é necessário pegar o span ativo, conforme código abaixo.
Span activeSpan = tracer.activeSpan();

... e definir o baggage item desejado, para isso o objetivo Span
tem o método setBaggageItem

activeSpan.setBaggageItem("user.email", "luram.archanjo@zup.com.br");

Para testar
http://localhost:16686/search

Após iniciar a aplicação e fazer algumas operações, como criar proposta...
entre no trace da operação que está o código e verifique se o baggage item
consta.
- código completo
Span activeSpan = tracer.activeSpan();
String userEmail = activeSpan.getBaggageItem("user.email");
activeSpan.setBaggageItem("user.email", userEmail);

#####################################################################

Jaeger-Log

Caso deseje reportar um log específico, como por exemplo, email do usuário, 
é necessário instrumentar no código.
O Spring provê uma classe denominada Tracer na qual você fazer operações
relacionadas ao OpenTracing.

public class PropostaController {

  private final Tracer tracer;

  public PropostaController(Tracer tracer) {
    this.tracer = tracer;
  }

}

- Agora com objeto, é necessário pegar o span ativo, conforme código abaixo
Span activeSpan = tracer.activeSpan();

É necessário definir o log desejado, para isso, tem o método log, conforme
código abaixo
activeSpan.log("Meu log");

Para testar http://localhost:16686/search

Agora basta entrar no trace da operação, que está o código e verifique
se o log consta.

Dica: O Spring já cadastra todos os logs no Jaeger, portanto, não há 
necessidade de instrumentar no código

######################################################################

Amostragem constante
As nossas aplicações enviam as amostragens de traces assíncronamente 
para o Jaeger, porém essa operação requer recursos computacionais, 
como CPU, memória, disco, etc. Portanto dependendo da volumetria o 
módulo do Jaeger em sua aplicação pode causar perda de performance!

Visando isso o OpenTracing provê várias formas de enviar amostragens, 
como por exemplo a constante que envia 100% de todas as operações
processadas pela aplicação para o Jaeger.

Para configurar amostragem constante, é necessário adicionar a seguinte propriedade
no arquivo application.properties:
# True para enviar 100%
opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:true}

# False para desativar
opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:false}

Dica: Cuidado com esse tipo de abordagem, pois, quando ligado pode causar uma perda
significativa de performance, dependendo da quantidade de operações.

##############################################################################

Amostragem probabilística

As nossas aplicações enviam as amostragens de traces assíncronamente para 
o Jaeger, porém essa operação requer recursos computacionais, como CPU, 
memória, disco, etc. Portanto dependendo da volumetria o módulo do Jaeger em 
sua aplicação pode causar perda de performance!

Visando isso o OpenTracing provê várias formas de enviar amostragens, 
como por exemplo a probabilística que envia de acordo com o desejado, 
como por exemplo: 10%, 30%, 50%, etc.

Para configurar a amostragem probabilística, precisamos adicionar a seguinte 
propriedade no arquivo application.properties:

# Para enviar 100%
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

# Para enviar 50%
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:0.5}

# Para enviar 10%
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:0.1}

Dica: É a abordagem mais recomendada pelo Bootcamp.

###########################################################################

Amostragem rate limit
As nossas aplicações enviam as amostragens de traces assíncronamente para o Jaeger,
porém essa operação requer recursos computacionais, como CPU, memória, disco, etc.
Portanto dependendo da volumetria o módulo do Jaeger em sua aplicação pode causar
perda de performance!

Visando isso o OpenTracing provê várias formas de enviar amostragens, como por 
exemplo a rate limit que envia de acordo com o desejado por segundo, como por 
exemplo: 3, 5, 10 operações por segundo.

Para configurar a amostragem rate limit, precisamos adicionar a seguinte propriedade no arquivo application.properties:

# Para enviar 10 traces por segundo
opentracing.jaeger.rate-limiting-sampler.max-traces-per-second=${JAEGER_SAMPLER:10}

Dica: É abordagem mais segura, pois nunca irá extrapolar o limite, consequentemente,
não irá impactar a aplicação.
#############################################################################


















