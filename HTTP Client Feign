Observação: Utilizado pela Zup

Precisamos com certa frequência criar diferentes web service clients, nosso serviço, 
na maioria das vezes necessitam se comunicar entre eles.

Podemos encontrar alguns padrões no processo de criação desses clientes, envolvem 
mapeamento de objetos de entrada, saída e configurações de URI como Path Params e 
Query Params. O projeto OpenFeign pode nos ajudar nessa geração, já que podemos
identificar um padrão na escrita desses clientes.

Integrando com OpenFeign
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-openfeign</artifactId>
<version>2.2.5.RELEASE</version>
</dependency>

- @EnableFeignClients no Application

- @FeignClient("cartoes")
public interface CartoesClient {
    
    @RequestMapping(method = RequestMethod.GET, value = "/cartoes")
    List<Cartao> cartoes();
    
}

Onde @FeignClient define o nome do cliente que estamos criando. 
Quando chamamos a operação, necessitamos saber a Uri dessa operação no servidor 
e também precisamos saber o método HTTP que essa operação chama. Com @RequestMapping, 
resolvemos isso.

##########################################################

FeignClientException na casa do 400 -
FeignException.BadRequest , FeignException.Conflict , FeignException.Forbidden , 
FeignException.Gone , FeignException.MethodNotAllowed , FeignException.NotAcceptable , 
FeignException.NotFound , FeignException.Gone , FeignException.MethodNotAllowed ,
FeignException.NotAcceptable , FeignException.NotFound , FeignExignception.TooManyExceptionRequests,
FeignExignception.TooMExocessUnitRequests , FeignExignception.TooManyRequests

FeignClientException na casa do 500 -
FeignException.BadGateway, FeignException.GatewayTimeout, FeignException.InternalServerError, 
FeignException.NotImplemented, FeignException.ServiceUnavailable

###############################################################

Controlando timeouts do Feign para aplicações Spring Boot

Em aplicações Spring Boot, estas possibilidades de configuração que já vem prontas
através das classes de autoconfiguração providas pelos starters. Por exemplo, para controlar
o tempo de espera para requisições feitas através do Feign

feign.client.config.nomeFeignClienteDefinidoNoBean.read-timeout=100

Com toda comunicação, para este bean específico, terá o tempo máximo de espera 
de 100 milisegundos.

Podemos também configurar o tempo máximo para conseguir realizar a conexão com outro
sistema. Abaixo uma combinação que leva 200 milisegundos para execução da operação.
feign.client.config.nomeFeignClienteDefinidoNoBean.connect-timeout=100;
################################################################################

Controlando timeouts do Hibernate para aplicações Spring Boot

O mesmo tipo de approach pode ser utilizado para controlar o timeout de execução 
padrão de queries através de alguma implementação da JPA.

spring.jpa.properties.javax.persistence.query.timeout = 50
Agora você sabe que por default toda query só pode levar no máximo 50 milisegundos.
Caso em algum ponto do sistema este tempo não seja suficiente, é possível de trocar
através dos chamados hints da JPA.

https://vladmihalcea.com/jpa-hibernate-query-hints/
https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#jpql-api

#############################################################

Documentação original!












