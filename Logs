Logs são utilizados para encontrar erros.

Trate Logs como fluxos de eventos!

Logs de forma crua são tipicamente um formato de texto com um evento por linha 
(apesar que pilhas de exceção podem ocupar várias linhas). Logs não tem começos ou términos
fixos, mas fluem continuamente enquanto o app estiver operante.

Log de dados é um arquivo de texto gerado por um software para descrever eventos
sobre o seu funcionamento, utilização por usuários ou interação com outros sistemas.
Após serem gerados, são incrementados ao longo do tempo com informações que permitem 
identificar possíveis bugs.

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Exemplo {

    private final Logger logger = LoggerFactory.getLogger(Exemplo.class);

    public void log() {
        logger.info("Log de informação");
        logger.warn("Log de aviso, algo está errado ou faltando! cuidado!");
        logger.error("Log de erro, algo de errado aconteceu!");
        logger.debug("Log de depuração, contém informações mais refinadas, 
                     que são mais úteis para depurar um aplicativo");
        logger.trace("Log de rastreabilidade, contém informações mais refinadas 
                     do que o DEBUG");
    }

}

Procure responder os 5W's
- Who - Quem está executando a operação?
- What - o que indica aquela operação?
- When - Quando a operação ocorreu?
- Where - Onde a operação ocorreu?
- Why - Porquê da linha do log.

######################################################################

Logs. XI do 12 Factor Apps

Um dos problemas dos Logs é que geralmente são gerados em arquivos e há necessidade 
de roteamento dos mesmos!
No FActor Apps nunca se preocupe com o roteamento ou armazenagem do fluxo de saída.
A aplicação nao deve tentar escrever, ou gerir arquivos de logs. No lugar, cada aplicação
em execução, escreve seu próprio fluxo de evento, sem buffer, para o stdout.
Logando no stdout, cada fluxo de logs de cada aplicação seráo capturados pelo ambiente
de execução e direcionados para um ou mais destinos finais para visualização e arquivamento
de longo prazo. Estes destinos de arquivamento não são visíveis ou configuráveis pela aplicação,
e, ao invés disso, são completamente geridos pelo ambiente de execução. Agregadores de logs
open source(Logstash, Fluentd, Fluenbit) estão disponíveis para este propósito.

###############################################################

Logs documentação Spring
O Spring usa Commons Logging para todos os logs internos, mas deixa a implementação de log subjacente aberta.
As configurações padrão são fornecidas para Java Util Logging, Log4j2 e LogBack. Em casa caso,
os registradores são pré-configurados para usar a saída do console com saída de arquivo opcional também
disponível. 
Por padrão, se você usar os Starters, o Logback é usado para registro. O roteamento de Logback
apropriado também está incluído para garantir que as bibliotecas dependentes que usam Java Util Logging,
Commins Logging, Log4J ou SLF4J funcionem corretamente.

##############################################################

- Ferramentas de log agregation de código aberto
 Logs Agregations podem ajudar na solução de problemas.
 Um sistema de agregação de log é um ótimo lugar para coletar dados de eventos.
 Essas são atividades irregulares que são significativas. Um exemplo pode ser logs
 de acesso para um sereviço da web. Eles são importantes porque queremos saber 
 o que está acessando nossos sistemas e quando. Outro exemplo seria uma condição
 de erro do aplicativo - por não ser uma condição operacional normal, pode ser
 valioso durante a solução de problemas.
 Algumas regras para Logs.
 - Inclua um carimbo de data/hora;
 - Formato DO em Json;
 - Não registre eventos insignificantes;
 - Registre todos os erros da api;
 - Avalie se é necessário registrar avisos;
 - Escreva mensagens em um formato legível;
 - Não registre dados informativos na produção;
 - Não registre nada que um humano não possa ler;
 
 3 principais são:
 ELK - Abreviação de Elasticsearch. Usado por Netflix, Facebook, Microsoft.
 Graylog - O mais novo dos três.
 Fluentd- Recomendado por AWS e Google Cloud.
 
 #######################################################
 
 O Log4j divide os logs em 5 níveis hierárquicos, sendo desde o nível mais baixo até o nível mais “severo”.
 São eles: DEBUG, INFO, WARN, ERROR, FATAL. A vantagem de utilizar esses níveis é que você pode dizer qual nível a aplicação deve 
 implementar.

Os níveis de log estão de forma crescente por nível de severidade (DEBUG, INFO, WARN, ERROR e FATAL), sendo que se você ativar o nível 
INFO, automaticamente todos os níveis acima de INFO e claro o próprio INFO. Se você ativar o ERROR apenas ele e o FATAL será ativado.

 
